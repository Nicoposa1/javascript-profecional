{"id":"ejercicio/prototype.html","dependencies":[{"name":"/mnt/c/Users/nico/Desktop/platzi/Escuela de JavaScript/javascript_profecional/package.json","includedInParent":true,"mtime":1593089495366}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Document</title>\r\n</head>\r\n<body>\r\n  <a href=\"/ejercicio/\">Go Back</a>\r\n\r\n  <script>// Un objeto comun y corriente\n// const zelda = {\n//   name: 'Zelda'\n// }\n// zelda.saludar = function (){\n//   console.log(`Holas, soy ${this.name}`);\n// }\n// zelda.saludar()\n// const link = {\n//   name: 'Link'\n// }\n// link.saludar = function (){\n//   console.log(`Holas, soy ${this.name}`);\n// }\n// link.saludar()\n// Seamos mas eficientes\n// function Hero (name){\n//   const hero = {\n//     name:name\n//   }\n//   hero.saludar = function(){\n//     console.log(`Hola soy ${this.name}`);\n//   }\n//   return hero\n// }\n// const zelda = Hero('Zelda')\n// zelda.saludar()\n// const link = Hero('Link')\n// link.saludar()\n// Aun podemos mejorar mas y evitar tener que crear la misma funcion cada vez \n// const heroMethods = {\n//   saludar: function(){\n//     console.log(`Me llamo ${this.name}`);\n//   },\n// }\n// function Hero (name){\n//   const hero = {\n//     name:name,\n//   };\n//   hero.saludar = heroMethods.saludar\n//   return hero\n// }\n// const zelda = Hero('Zelda')\n// zelda.saludar()\n// const link = Hero('Link')\n// link.saludar()\n// Object.create\n// const nuevoObjeto = object.create(onjeto)\n// const heroMethods = {\n//   saludar: function(){\n//     console.log(`Soy  ${this.name}`);\n//   },\n// }\n// function Hero (name){\n//   const hero = Object.create(heroMethods)\n//   hero.name = name\n//   return hero\n// }\n// const zelda = Hero('Zelda')\n// zelda.saludar()\n// const link = Hero('Link')\n// link.saludar()\n// El metodo de hero dentro de hero \n// const heroMethods = {\n//   saludar: function(){\n//     console.log(`Soy  ${this.name}`);\n//   },\n// }\n// function Hero (name){\n//   const hero = Object.create(Hero.prototype)\n//   hero.name = name\n//   return hero\n// }\n// Hero.prototype.saludar = function(){\n//   console.log(`Soy superhero! ${this.name}`);\n// }\n// const zelda = Hero('Zelda')\n// zelda.saludar()\n// const link = Hero('Link')\n// link.saludar()\n// new es un atajo (azucar sintactica) para llevar hero.prototype al objeto\nfunction Hero(name) {\n  // const hero = Object.create(Hero.prototype)\n  this.name = name; // return hero\n}\n\nHero.prototype.saludar = function () {\n  console.log(`new:  ${this.name}`);\n};\n\nconst zelda = new Hero('Zelda');\nzelda.saludar();\nconst link = new Hero('Link');\nlink.saludar();</script>\r\n</body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"db27be790c59af0414202454f1d1bb62","cacheData":{"env":{}}}