{"id":"ejercicio/generators.html","dependencies":[{"name":"/mnt/c/Users/nico/Desktop/platzi/Escuela de JavaScript/javascript_profecional/package.json","includedInParent":true,"mtime":1593089495366}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Document</title>\r\n</head>\r\n<body>\r\n  <a href=\"/ejercicio/\">Go Back</a>\r\n\r\n  <script>// Los generadores son funciones de las que se puede salir y volver a entrar\n// Su contexto (asociacion de variables) ser√° conservado entre las reentradas.\n// Cada vez que llamamos next, la ejecucion del generador va a continuar hasta el proximo yield\nfunction* simpleGenerator() {\n  console.log('GENERATOR START');\n  yield;\n  console.log('GENERATOR END');\n} // const gen = simpleGenerator()\n// podemos hacer generadores infinitos\n\n\nfunction* idMaker() {\n  let id = 1;\n\n  while (true) {\n    yield id;\n    id = id + 1;\n  }\n} // Cuando llamamos next tambien podemos pasar valores que la funcion recibe\n\n\nfunction* idMakerWithRest() {\n  let id = 1;\n  let reset;\n\n  while (true) {\n    reset = yield id;\n\n    if (reset) {\n      id = 1;\n    } else {\n      id = id + 1;\n    }\n  }\n} // Ahora hagamos un ejemplo un poco mas complejo: la secuencia fibonacci\n\n\nfunction* fibonacci() {\n  let a = 1;\n  let b = 1;\n\n  while (true) {\n    const nextNumber = a + b;\n    a = b;\n    b = nextNumber;\n    yield nextNumber;\n  }\n}</script>\r\n</body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"058decbc7d165991b40aac619d1b9804","cacheData":{"env":{}}}