{"id":"ejercicio/proxy.html","dependencies":[{"name":"/mnt/c/Users/nico/Desktop/platzi/Escuela de JavaScript/javascript_profecional/package.json","includedInParent":true,"mtime":1593089495366}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Document</title>\r\n</head>\r\n<body>\r\n  <a href=\"/ejercicio/\">Go Back</a>\r\n  \r\n  <script src=\"https://unpkg.com/fast-levenshtein@2.0.6/levenshtein.js\"></script>\r\n  <script>// Los genradores son funciones de las que se puede salir y volver a entrar.\n// Su contexto (asociaciones de variables) sera convervado entre las reentradas.\n// Cada vez que llamamos next, la ejecucion del generador va a continuar hasta el proximo yield.\n// Podemos hacer generadores infinitos.\n// Cuando llamamos next tambien podemos pasar valores que la funcion recibe.\nconst target = {\n  red: 'Rojo',\n  green: 'Verde',\n  blue: 'Azul'\n};\nconst handler = {\n  get(obj, prop) {\n    if (prop in obj) {\n      return obj[prop];\n    }\n\n    const suggestion = Object.keys(obj).find(key => {\n      return Levenshtein.get(key, prop) <= 3;\n    });\n\n    if (suggestion) {\n      console.log(`${prop} no se encontro. Quisiste decir ${suggestion}?`);\n      return obj[prop];\n    }\n  }\n\n};\nconst p = new Proxy(target, handler);</script>\r\n</body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"3e38b596a9c90672dd00d9584380c892","cacheData":{"env":{}}}